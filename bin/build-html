#!/usr/bin/env coffee
# TODO: we should actually check the arguments and have a usage message
[_,_,pagesPath,buildRoot] = process.argv
system = require "node-system"
{type,read,write,exists,stat} = require "fairmont"
{resolve,join,dirname} = require "path"
CSON = require "c50n"

mkdirP = (path) ->
  system "mkdir -p #{path}" 
  
mtime = do ->
  
  {max} = Math
  hoist = (value) -> if type(value) != "array" then [ value ] else value
  _mtime = (paths) -> 
    paths = hoist( paths )
    mtimes = for path in paths
      if exists( path ) then stat( path ).mtime.getTime() else -1
    max( mtimes... )

  (sources,destination,fn) ->
    fn() if _mtime( sources ) > _mtime( destination )

render = (type,key,path) ->
  arkPath = resolve( "src/web/ark" )
  framePath = join( arkPath, "html/frame.coffee" )
  gadgetPath = join( arkPath, "gadgets/#{type}/gadget.coffee")
  rendererPath = join(arkPath, "gadgets/#{type}/html.coffee")
  cssPath = join(arkPath, "gadgets/#{type}/css.coffee")
  buildPath = resolve( buildRoot, path )
  mtime [ framePath, gadgetPath, rendererPath, cssPath ], buildPath, ->
    # TODO: we should be able to vary the frame
    Frame = require( framePath )
    frame = new Frame
    mkdirP( dirname( buildPath ) )
    if type?
      console.log "Generate #{type} '#{key}' as #{path}"
      Gadget = require gadgetPath
      gadget = new Gadget({key})
      frame.feature = -> @div class: "feature", => @text gadget.render()
      if gadget.load?
        gadget.load().on "succcess", -> 
          write buildPath, frame.main()
      else
        write buildPath, frame.main()
    else
      console.log "Generating an empty page '#{key}' as #{path}"
      write buildPath, frame.main()

pages = CSON.parse( read( pagesPath ) )

for name,page of pages
  switch page.type
    when "file"
      filename = if page.ext? then "#{name}.#{page.ext}" else name
      key = if page.key? then page.key else name
      render( page.subtype, key, filename )
    when "directory"
      Gadget = require "../src/web/ark/gadgets/#{page.subtype}/gadget"
      for key in Gadget.match( page.match )
        filename = if page.ext? then "#{key}.#{page.ext}" else key
        render( page.subtype, key, "#{name}/#{filename}" )

